# =============================================================================
# MindNote 本地开发环境配置模板
# =============================================================================
# 复制此文件为 .env.local 并填入实际的配置值
# 警告：不要将包含真实密钥的 .env.local 文件提交到版本控制系统

# =============================================================================
# 数据库配置 (本地开发)
# =============================================================================
# 使用 Docker Compose 时可以保持这些默认值
# 生产环境请使用 scripts/generate-secrets.js 生成强密码
DATABASE_URL="postgresql://mindnote:YOUR_SECURE_POSTGRES_PASSWORD@localhost:5432/mindnote_dev"
POSTGRES_USER=mindnote
POSTGRES_PASSWORD=YOUR_SECURE_POSTGRES_PASSWORD_HERE
POSTGRES_DB=mindnote_dev

# 测试数据库 (与主数据库分离)
TEST_DATABASE_URL="postgresql://mindnote:YOUR_SECURE_TEST_PASSWORD@localhost:5432/mindnote_test"

# =============================================================================
# Redis配置 (本地开发)
# =============================================================================
REDIS_URL="redis://:YOUR_SECURE_REDIS_PASSWORD@localhost:6379"
REDIS_PASSWORD=YOUR_SECURE_REDIS_PASSWORD_HERE

# =============================================================================
# NextAuth.js配置
# =============================================================================
NEXTAUTH_URL="http://localhost:3000"
# 运行 node scripts/generate-secrets.js 生成安全密钥
NEXTAUTH_SECRET=YOUR_GENERATED_NEXTAUTH_SECRET_HERE

# =============================================================================
# AI服务配置
# =============================================================================
# 开发环境可以使用以下免费或本地选项：

# 选项1: 使用Ollama本地AI服务 (推荐开发使用)
OLLAMA_BASE_URL="http://localhost:11434"
OLLAMA_MODEL="llama3:8b"
OLLAMA_EMBEDDING_MODEL="nomic-embed-text"

# 选项2: 使用智谱AI (GLM - 有免费额度)
ZHIPU_API_KEY="your-zhipu-api-key"
ZHIPU_BASE_URL="https://open.bigmodel.cn/api/paas/v4"
ZHIPU_MODEL="glm-4"

# 选项3: 使用DeepSeek (有免费额度)
DEEPSEEK_API_KEY="your-deepseek-api-key"
DEEPSEEK_BASE_URL="https://api.deepseek.com"
DEEPSEEK_MODEL="deepseek-chat"

# 选项4: 如果有OpenAI或Anthropic账户
# OPENAI_API_KEY="your-openai-api-key"
# ANTHROPIC_API_KEY="your-anthropic-api-key"

# =============================================================================
# AI功能配置
# =============================================================================
AI_PROVIDERS_PRIORITY="ollama,zhipu,deepseek,openai,anthropic"
AI_PRIMARY_PROVIDER="ollama"
AI_FALLBACK_PROVIDER="zhipu"

# AI功能开关
AI_ANALYSIS_ENABLED=true
AI_AUTO_CLASSIFICATION=true
AI_TAG_GENERATION=true
AI_EMBEDDING_ENABLED=true

# AI性能配置
AI_RESPONSE_TIMEOUT_MS=10000
AI_MAX_TOKENS=2000
AI_BATCH_SIZE=3

# 成本控制 (开发环境宽松设置)
AI_DAILY_BUDGET_USD=5.00
AI_COST_PER_NOTE_LIMIT=0.05
AI_RATE_LIMIT_RPM=30
AI_RATE_LIMIT_RPH=500

# =============================================================================
# 应用配置
# =============================================================================
NODE_ENV="development"
PORT=3000

# =============================================================================
# 安全配置 (开发环境)
# =============================================================================
# 开发环境可以较宽松，生产环境需要严格限制
CORS_ORIGIN="http://localhost:3000,http://localhost:3001"
RATE_LIMIT_WINDOW_MS=300000
RATE_LIMIT_MAX_REQUESTS=200

# 应用密钥 (运行生成脚本生成)
APP_SECRET=YOUR_GENERATED_APP_SECRET_HERE
ENCRYPTION_KEY=YOUR_GENERATED_ENCRYPTION_KEY_HERE
JWT_SECRET=YOUR_GENERATED_JWT_SECRET_HERE

# =============================================================================
# 日志配置
# =============================================================================
LOG_LEVEL="debug"
LOG_FILE="logs/app.log"

# =============================================================================
# 监控配置
# =============================================================================
PROMETHEUS_PORT=9090
METRICS_ENABLED=true

# =============================================================================
# 开发工具配置
# =============================================================================
CHOKIDAR_USEPOLLING=true
FAST_REFRESH=true

ENABLE_DEV_TOOLS=true
ENABLE_AI_FEATURES=true
ENABLE_VECTOR_SEARCH=true
ENABLE_ANALYTICS=true

# =============================================================================
# 数据库连接池配置 (开发环境)
# =============================================================================
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=5
DATABASE_POOL_IDLE_TIMEOUT=30000
DATABASE_POOL_CONNECTION_TIMEOUT=5000

# =============================================================================
# 向量搜索配置
# =============================================================================
AI_EMBEDDING_MODEL="text-embedding-3-small"
AI_EMBEDDING_DIMENSIONS=1536
AI_SIMILARITY_THRESHOLD=0.7

# =============================================================================
# 使用说明
# =============================================================================
# 1. 复制此文件: cp .env.local.template .env.local
# 2. 生成安全密钥: node scripts/generate-secrets.js
# 3. 将生成的密钥替换到 .env.local 文件中
# 4. 配置至少一个AI服务提供商
# 5. 启动Docker: docker-compose up -d postgres redis
# 6. 运行数据库迁移: npm run db:push
# 7. 启动开发服务器: npm run dev

# =============================================================================
# 安全提醒
# =============================================================================
# - 绝不将包含真实密钥的 .env.local 提交到Git
# - 使用强密码和随机生成的密钥
# - 定期轮换API密钥和密码
# - 生产环境使用环境变量管理服务
# - 启用数据库SSL连接
# - 配置防火墙规则限制访问