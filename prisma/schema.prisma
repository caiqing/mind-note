// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  passwordHash      String    @map("password_hash")
  fullName          String?   @map("full_name")
  avatarUrl         String?   @map("avatar_url")
  emailVerified     Boolean   @default(false) @map("email_verified")
  aiPreferences     Json      @default("{}") @map("ai_preferences")
  settings          Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLoginAt       DateTime? @map("last_login_at")

  // Relations
  notes             Note[]
  categories        Category[]
  tags              Tag[]
  aiProcessingLogs  AiProcessingLog[]
  userFeedback      UserFeedback[]
  systemConfig      SystemConfig[]
  aiAnalyses        AIAnalysis[]
  embeddingVectors  EmbeddingVector[]
  analysisLogs      AnalysisLog[]

  @@map("users")
}

// 笔记表
model Note {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  title           String
  content         String    @db.Text
  contentHash     String    @map("content_hash")
  contentVector   Unsupported("vector(1536)")? @map("content_vector") // pgvector

  // AI分析结果字段
  aiProcessed     Boolean   @default(false) @map("ai_processed")
  aiSummary       String?   @map("ai_summary") @db.Text
  aiKeywords      String[]  @default([]) @map("ai_keywords")
  aiKeyConcepts   String[]  @default([]) @map("ai_key_concepts")
  aiCategory      String    @default("other") @map("ai_category")
  aiTags          String[]  @default([]) @map("ai_tags")
  aiSentiment     String?   @map("ai_sentiment")
  aiConfidence    Float?    @default(0.0) @map("ai_confidence")
  aiModel         String?   @map("ai_model")
  aiProvider      String?   @map("ai_provider")
  aiTokens        Int       @default(0) @map("ai_tokens")
  aiCost          Decimal   @default(0) @db.Decimal(10, 6) @map("ai_cost")

  // 基础字段
  categoryId      Int?      @map("category_id")
  tags            String[]  @default([])
  metadata        Json      @default("{}")
  version         Int       @default(1)
  status          NoteStatus @default(DRAFT)
  isPublic        Boolean   @default(false) @map("is_public")
  viewCount       Int       @default(0) @map("view_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  aiProcessedAt   DateTime? @map("ai_processed_at")

  // Relations
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category         Category?    @relation(fields: [categoryId], references: [id])
  noteTags         NoteTag[]
  sourceRelations  NoteRelationship[] @relation("SourceNote")
  targetRelations  NoteRelationship[] @relation("TargetNote")
  aiProcessingLogs AiProcessingLog[]
  userFeedback     UserFeedback[]
  aiAnalysis       AIAnalysis?
  embeddingVector  EmbeddingVector?
  analysisLogs     AnalysisLog[]

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([categoryId])
  @@index([contentHash])
  @@index([aiProcessed, aiProcessedAt])
  @@index([isPublic, status])
  @@index([viewCount(sort: Desc)])
  @@index([aiProcessedAt])
  @@index([aiCategory])
  @@index([aiSentiment])
  @@index([aiConfidence(sort: Desc)])

  @@map("notes")

  // Vector search indexes for pgvector (AI functionality)
  // Note: Vector indexes will be created manually in migration with proper SQL syntax
}

// 标签表
model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  color       String   @default("#6B7280")
  category    String   @default("general")
  description String?
  createdBy   String?  @map("created_by")
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user     User?     @relation(fields: [createdBy], references: [id])
  noteTags NoteTag[]

  @@index([usageCount(sort: Desc)])
  @@index([category])
  @@index([createdBy])
  @@index([createdAt])
  @@index([createdBy, usageCount(sort: Desc)])
  @@map("tags")
}

// 分类表
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String?
  icon      String?
  color     String   @default("#6B7280")
  parentId  Int?     @map("parent_id")
  sortOrder Int      @default(0) @map("sort_order")
  createdBy String?  @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  user     User?     @relation(fields: [createdBy], references: [id])
  notes    Note[]

  @@index([parentId, sortOrder])
  @@index([createdBy])
  @@index([name])
  @@index([createdAt])
  @@map("categories")
}

// 笔记标签关联表
model NoteTag {
  noteId String @map("note_id")
  tagId  Int    @map("tag_id")

  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
  @@index([noteId])
  @@index([tagId])
  @@index([noteId, tagId])
  @@map("note_tags")
}

// 用户笔记关系表
model NoteRelationship {
  id             String           @id @default(cuid())
  sourceNoteId   String           @map("source_note_id")
  targetNoteId   String           @map("target_note_id")
  relationshipType RelationshipType @map("relationship_type")
  strengthScore  Decimal          @default(0.5) @map("strength_score") @db.Decimal(3, 2)
  aiGenerated    Boolean          @default(false) @map("ai_generated")
  metadata       Json             @default("{}")
  createdAt      DateTime         @default(now()) @map("created_at")

  // Relations
  sourceNote Note @relation("SourceNote", fields: [sourceNoteId], references: [id], onDelete: Cascade)
  targetNote Note @relation("TargetNote", fields: [targetNoteId], references: [id], onDelete: Cascade)

  @@unique([sourceNoteId, targetNoteId, relationshipType])
  @@index([sourceNoteId])
  @@index([targetNoteId])
  @@index([relationshipType, strengthScore(sort: Desc)])
  @@index([aiGenerated, relationshipType])
  @@index([createdAt(sort: Desc)])
  @@map("note_relationships")
}

// AI处理记录表
model AiProcessingLog {
  id             String          @id @default(cuid())
  noteId         String          @map("note_id")
  userId         String          @map("user_id")
  processingType ProcessingType  @map("processing_type")
  provider       String
  model          String
  inputTokens    Int?            @map("input_tokens")
  outputTokens   Int?            @map("output_tokens")
  processingTime Int?            @map("processing_time_ms")
  cost           Decimal?        @db.Decimal(10, 6)
  status         ProcessingStatus @default(PROCESSING)
  errorMessage   String?         @map("error_message")
  result         Json?
  createdAt      DateTime        @default(now()) @map("created_at")

  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([noteId])
  @@index([userId])
  @@index([processingType])
  @@index([provider, status])
  @@index([createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@map("ai_processing_logs")
}

// 用户反馈表
model UserFeedback {
  id          String       @id @default(cuid())
  userId      String       @map("user_id")
  noteId      String       @map("note_id")
  feedbackType FeedbackType @map("feedback_type")
  rating      Int
  comment     String?
  createdAt   DateTime     @default(now()) @map("created_at")

  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([noteId, feedbackType])
  @@index([userId])
  @@index([feedbackType, rating(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("user_feedback")
}

// 系统配置表
model SystemConfig {
  key         String   @id
  value       Json
  description String?
  updatedBy   String?  @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User? @relation(fields: [updatedBy], references: [id])

  @@map("system_config")
}

// 枚举类型
enum NoteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RelationshipType {
  SEMANTIC
  REFERENCE
  SIMILAR
  RELATED
}

enum ProcessingType {
  SUMMARIZATION
  CLASSIFICATION
  EMBEDDING
  RELATIONSHIP
}

enum ProcessingStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum FeedbackType {
  SUMMARY_QUALITY
  CLASSIFICATION
  RELATIONSHIP
}

// AI分析结果表
model AIAnalysis {
  id        String   @id @default(cuid())
  noteId    String   @map("note_id")
  userId    String   @map("user_id")

  // 分析结果
  summary   String?  @db.Text
  sentiment String?  // positive, negative, neutral
  keyConcepts String[] @default([]) @map("key_concepts")
  categories Json  // JSON数组存储分类信息
  tags      Json  // JSONB存储AI推荐标签

  // 技术信息
  aiProviderId String @map("ai_provider_id")
  modelVersion String @map("model_version")
  confidence Decimal @default(0) @db.Decimal(3, 2)
  processingTime Int @map("processing_time") // ms
  tokenCount Int @default(0) @map("token_count")

  // 状态
  status AnalysisStatus @default(PENDING)
  error String?

  // 时间戳
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations - 修改为一对多关系
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiProvider AIProvider @relation(fields: [aiProviderId], references: [id])

  @@unique([noteId]) // 一个笔记只有一个AI分析结果
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([aiProviderId])
  @@map("ai_analysis")
}

// 向量嵌入表
model EmbeddingVector {
  id        String   @id @default(cuid())
  noteId    String   @map("note_id")
  userId    String   @map("user_id")

  // 向量数据
  embedding Bytes    // pgvector向量类型，存储为字节数组
  model     String   @default("text-embedding-3-small")
  dimensions Int @default(1536)

  // 技术信息
  checksum  String   // 内容SHA256
  version   Int @default(1)

  // 时间戳
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations - 修改为一对多关系
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId]) // 一个笔记只有一个向量嵌入
  @@index([userId])
  @@index([createdAt])
  @@index([checksum])
  @@map("embedding_vectors")
}

// 内容分类表（扩展原有Category）
model ContentCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#6B7280")
  icon        String?

  // 分类层级
  parentId    String?  @map("parent_id")
  level       Int      @default(1)
  sortOrder   Int      @default(0) @map("sort_order")

  // 统计信息
  noteCount   Int      @default(0) @map("note_count")

  // 状态
  isActive    Boolean  @default(true) @map("is_active")

  // 时间戳
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  parent ContentCategory? @relation("ContentCategoryHierarchy", fields: [parentId], references: [id])
  children ContentCategory[] @relation("ContentCategoryHierarchy")

  @@index([parentId, sortOrder])
  @@index([isActive])
  @@index([noteCount(sort: Desc)])
  @@map("content_categories")
}

// 分析日志表
model AnalysisLog {
  id            String   @id @default(cuid())
  noteId        String   @map("note_id")
  userId        String   @map("user_id")
  aiProviderId  String   @map("ai_provider_id")
  modelVersion  String   @map("model_version")

  // 请求信息
  requestType   AnalysisType @map("request_type")
  inputTokens   Int @default(0) @map("input_tokens")
  outputTokens  Int @default(0) @map("output_tokens")
  totalTokens   Int @default(0) @map("total_tokens")

  // 成本信息
  cost          Decimal @default(0) @db.Decimal(10, 6)
  currency      String @default("USD")

  // 性能信息
  responseTime  Int? @map("response_time") // ms
  processingTime Int? @map("processing_time") // ms

  // 质量信息
  success       Boolean @default(false)
  errorCode     String? @map("error_code")
  errorMessage  String? @map("error_message")
  quality       Json? // 质量指标

  // 时间戳
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiProvider AIProvider @relation(fields: [aiProviderId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([success])
  @@index([aiProviderId])
  @@index([requestType])
  @@map("analysis_logs")
}

// AI服务提供商表
model AIProvider {
  id            String   @id @default(cuid())
  name          String   @unique
  apiKeyEncrypted String @map("api_key_encrypted")
  endpoint      String?

  // 配置
  defaultModel  String? @map("default_model")
  rateLimit     Int @default(60) @map("rate_limit") // per minute
  costLimit     Decimal @default(1.0) @db.Decimal(10, 4) @map("cost_limit") // per hour
  maxTokens     Int @default(4096) @map("max_tokens")

  // 设置
  priority      Int @default(1)
  isActive      Boolean @default(true) @map("is_active")
  fallbackEnabled Boolean @default(true) @map("fallback_enabled")

  // 统计
  totalRequests BigInt @default(0) @map("total_requests")
  totalCost     Decimal @default(0) @db.Decimal(12, 6) @map("total_cost")
  successRate   Decimal @default(0) @db.Decimal(5, 4) @map("success_rate")

  // 时间戳
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  aiAnalyses AIAnalysis[]
  analysisLogs AnalysisLog[]

  @@index([isActive, priority])
  @@index([successRate(sort: Desc)])
  @@map("ai_providers")
}

// 枚举类型
enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AnalysisType {
  SUMMARY
  CLASSIFICATION
  TAG_EXTRACTION
  SENTIMENT
  FULL_ANALYSIS
}

// Database constraints will be added in migration files

// Vector extension for pgvector (will be created in migration)
// These are SQL statements that will be added to the migration:
// CREATE EXTENSION IF NOT EXISTS vector;