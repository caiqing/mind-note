/**
 * API 统一类型定义
 * T106-T111 API实现层的核心类型系统
 */

// ============================================================================
// 通用响应类型
// ============================================================================

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
  message?: string;
  timestamp: string;
  requestId?: string;
}

export interface PaginatedResponse<T> {
  items: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}

export interface BatchOperationResult<T> {
  successful: T[];
  failed: Array<{
    item: T;
    error: {
      code: string;
      message: string;
    };
  }>;
  totalProcessed: number;
  successRate: number;
}

// ============================================================================
// T106 笔记管理API类型
// ============================================================================

export interface Note {
  id: string;
  title: string;
  content: string;
  excerpt: string;
  status: 'draft' | 'published' | 'archived' | 'deleted';
  visibility: 'private' | 'public' | 'shared';
  categoryId?: string;
  userId: string;
  tags: NoteTag[];
  metadata: NoteMetadata;
  analytics: NoteAnalytics;
  createdAt: string;
  updatedAt: string;
  publishedAt?: string;
}

export interface NoteTag {
  id: string;
  name: string;
  category: string;
  color?: string;
  weight: number;
  relevanceScore: number;
}

export interface NoteMetadata {
  wordCount: number;
  readingTime: number;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  language: string;
  lastModifiedBy: string;
  version: number;
  aiProcessed: boolean;
  embeddingGenerated: boolean;
  customFields?: Record<string, any>;
}

export interface NoteAnalytics {
  views: number;
  likes: number;
  shares: number;
  comments: number;
  averageRating: number;
  totalRatingCount: number;
  lastViewedAt?: string;
  engagementRate: number;
}

export interface CreateNoteRequest {
  title: string;
  content: string;
  categoryId?: string;
  tags?: string[];
  status?: 'draft' | 'published';
  visibility?: 'private' | 'public' | 'shared';
  customFields?: Record<string, any>;
  autoGenerateTags?: boolean;
  autoGenerateSummary?: boolean;
}

export interface UpdateNoteRequest extends Partial<CreateNoteRequest> {
  id: string;
  version?: number;
}

export interface NoteFilters {
  status?: ('draft' | 'published' | 'archived')[];
  visibility?: ('private' | 'public' | 'shared')[];
  categoryId?: string;
  tags?: string[];
  userId?: string;
  dateRange?: {
    start: string;
    end: string;
  };
  wordCountRange?: {
    min: number;
    max: number;
  };
  aiProcessed?: boolean;
  hasEmbedding?: boolean;
  sortBy?: 'createdAt' | 'updatedAt' | 'views' | 'likes' | 'title';
  sortOrder?: 'asc' | 'desc';
}

export interface BatchNoteOperation {
  noteIds: string[];
  operation: 'delete' | 'archive' | 'publish' | 'unpublish' | 'updateCategory' | 'addTags' | 'removeTags';
  params?: {
    categoryId?: string;
    tags?: string[];
    reason?: string;
  };
}

// ============================================================================
// T107 标签管理API类型
// ============================================================================

export interface Tag {
  id: string;
  name: string;
  description?: string;
  category: TagCategory;
  color: string;
  icon?: string;
  usageCount: number;
  weight: number;
  relatedTags: string[];
  synonyms: string[];
  createdAt: string;
  updatedAt: string;
  createdBy: string;
  isActive: boolean;
  metadata: TagMetadata;
}

export interface TagCategory {
  id: string;
  name: string;
  description?: string;
  color: string;
  icon?: string;
  parentId?: string;
  level: number;
  children: string[];
  tagCount: number;
  isActive: boolean;
}

export interface TagMetadata {
  autoGenerated: boolean;
  confidence: number;
  source: 'manual' | 'ai' | 'import';
  lastUsed: string;
  trending: boolean;
  seasonal?: boolean;
  customFields?: Record<string, any>;
}

export interface CreateTagRequest {
  name: string;
  description?: string;
  categoryId: string;
  color?: string;
  icon?: string;
  synonyms?: string[];
  relatedTags?: string[];
  customFields?: Record<string, any>;
}

export interface UpdateTagRequest extends Partial<CreateTagRequest> {
  id: string;
}

export interface TagFilters {
  categories?: string[];
  isActive?: boolean;
  source?: ('manual' | 'ai' | 'import')[];
  usageRange?: {
    min: number;
    max: number;
  };
  trending?: boolean;
  sortBy?: 'name' | 'usageCount' | 'createdAt' | 'updatedAt';
  sortOrder?: 'asc' | 'desc';
}

export interface TagSuggestion {
  tag: Tag;
  confidence: number;
  reason: string;
  context: string;
}

export interface BatchTagOperation {
  tagIds: string[];
  operation: 'merge' | 'delete' | 'archive' | 'activate' | 'deactivate' | 'updateCategory';
  params?: {
    targetTagId?: string;
    categoryId?: string;
    reason?: string;
  };
}

// ============================================================================
// T108 用户管理API类型
// ============================================================================

export interface User {
  id: string;
  email: string;
  username: string;
  displayName: string;
  avatar?: string;
  bio?: string;
  preferences: UserPreferences;
  subscription: UserSubscription;
  statistics: UserStatistics;
  roles: string[];
  status: 'active' | 'inactive' | 'suspended' | 'deleted';
  lastLoginAt?: string;
  createdAt: string;
  updatedAt: string;
}

export interface UserPreferences {
  theme: 'light' | 'dark' | 'auto';
  language: string;
  timezone: string;
  notifications: NotificationSettings;
  privacy: PrivacySettings;
  aiSettings: AISettings;
  editorSettings: EditorSettings;
}

export interface NotificationSettings {
  email: boolean;
  push: boolean;
  inApp: boolean;
  frequency: 'immediate' | 'hourly' | 'daily' | 'weekly';
  types: {
    comments: boolean;
    likes: boolean;
    follows: boolean;
    mentions: boolean;
    system: boolean;
  };
}

export interface PrivacySettings {
  profileVisibility: 'public' | 'private' | 'friends';
  showEmail: boolean;
  showActivity: boolean;
  allowDataCollection: boolean;
  allowPersonalization: boolean;
}

export interface AISettings {
  autoGenerateTags: boolean;
  autoGenerateSummary: boolean;
  enableSuggestions: boolean;
  preferredProvider: string;
  customPrompts?: Record<string, string>;
}

export interface EditorSettings {
  defaultFormat: 'markdown' | 'rich-text' | 'plain';
  autoSave: boolean;
  autoSaveInterval: number;
  spellCheck: boolean;
  wordWrap: boolean;
  fontSize: number;
  fontFamily: string;
}

export interface UserSubscription {
  plan: 'free' | 'pro' | 'team' | 'enterprise';
  status: 'active' | 'inactive' | 'cancelled' | 'expired';
  currentPeriodStart: string;
  currentPeriodEnd: string;
  cancelAtPeriodEnd: boolean;
  limits: SubscriptionLimits;
}

export interface SubscriptionLimits {
  notes: number;
  storage: number; // in MB
  aiRequests: number;
  collaborators: number;
  apiCalls: number;
}

export interface UserStatistics {
  totalNotes: number;
  totalViews: number;
  totalLikes: number;
  totalComments: number;
  followers: number;
  following: number;
  joinedAt: string;
  streakDays: number;
  lastActiveAt: string;
}

export interface CreateUserRequest {
  email: string;
  username: string;
  displayName: string;
  password: string;
  inviteCode?: string;
  preferences?: Partial<UserPreferences>;
}

export interface UpdateUserRequest extends Partial<CreateUserRequest> {
  id: string;
  currentPassword?: string;
  newPassword?: string;
}

export interface UserFilters {
  status?: ('active' | 'inactive' | 'suspended')[];
  plan?: ('free' | 'pro' | 'team' | 'enterprise')[];
  roles?: string[];
  dateRange?: {
    start: string;
    end: string;
  };
  activityRange?: {
    start: string;
    end: string;
  };
  sortBy?: 'createdAt' | 'lastLoginAt' | 'displayName' | 'email';
  sortOrder?: 'asc' | 'desc';
}

// ============================================================================
// T109 搜索API类型
// ============================================================================

export interface SearchRequest {
  query: string;
  filters: SearchFilters;
  options: SearchOptions;
  context?: SearchContext;
}

export interface SearchFilters {
  type?: ('notes' | 'tags' | 'users' | 'categories')[];
  categories?: string[];
  tags?: string[];
  users?: string[];
  status?: ('draft' | 'published' | 'archived')[];
  visibility?: ('private' | 'public' | 'shared')[];
  dateRange?: {
    start: string;
    end: string;
  };
  wordCountRange?: {
    min: number;
    max: number;
  };
  ratingRange?: {
    min: number;
    max: number;
  };
  aiProcessed?: boolean;
  hasAttachments?: boolean;
  language?: string[];
}

export interface SearchOptions {
  limit?: number;
  offset?: number;
  sortBy?: 'relevance' | 'date' | 'popularity' | 'rating' | 'title';
  sortOrder?: 'asc' | 'desc';
  includeContent?: boolean;
  includeMetadata?: boolean;
  includeAnalytics?: boolean;
  highlightMatches?: boolean;
  fuzzy?: boolean;
  boostRecent?: boolean;
  boostPopular?: boolean;
}

export interface SearchContext {
  userId?: string;
  sessionId?: string;
  previousQueries?: string[];
  userPreferences?: {
    preferredLanguage?: string;
    preferredCategories?: string[];
    excludedTags?: string[];
  };
  location?: {
    lat: number;
    lng: number;
    radius?: number;
  };
}

export interface SearchResult<T = any> {
  item: T;
  score: number;
  highlights?: Array<{
    field: string;
    fragments: string[];
  }>;
  explanation?: string;
}

export interface SearchResponse {
  results: SearchResult[];
  total: number;
  took: number; // response time in ms
  suggestions?: string[];
  corrections?: Array<{
    original: string;
    correction: string;
    confidence: number;
  }>;
  facets?: Record<string, Array<{
    value: string;
    count: number;
  }>>;
  metadata: {
    query: string;
    filters: SearchFilters;
    options: SearchOptions;
    timestamp: string;
  };
}

export interface SearchSuggestion {
  query: string;
  type: 'popular' | 'trending' | 'personal' | 'related';
  count: number;
  lastUsed?: string;
  context?: string;
}

export interface SearchAnalytics {
  totalSearches: number;
  uniqueQueries: number;
  averageResults: number;
  zeroResultsRate: number;
  clickThroughRate: number;
  popularQueries: Array<{
    query: string;
    count: number;
  }>;
  trendingQueries: Array<{
    query: string;
    previousCount: number;
    currentCount: number;
    trend: 'up' | 'down' | 'stable';
  }>;
}

// ============================================================================
// T110 分析API类型
// ============================================================================

export interface AnalyticsRequest {
  timeRange: TimeRange;
  metrics: AnalyticsMetric[];
  dimensions: AnalyticsDimension[];
  filters?: AnalyticsFilters;
  options?: AnalyticsOptions;
}

export interface TimeRange {
  start: string;
  end: string;
  preset?: '7d' | '30d' | '90d' | '1y' | 'all';
  granularity?: 'hour' | 'day' | 'week' | 'month';
}

export type AnalyticsMetric =
  | 'views'
  | 'uniqueViews'
  | 'likes'
  | 'comments'
  | 'shares'
  | 'engagementRate'
  | 'readingTime'
  | 'completionRate'
  | 'conversionRate'
  | 'retentionRate'
  | 'churnRate'
  | 'activeUsers'
  | 'newUsers'
  | 'revenue'
  | 'aiRequests'
  | 'apiCalls';

export type AnalyticsDimension =
  | 'date'
  | 'user'
  | 'note'
  | 'category'
  | 'tag'
  | 'source'
  | 'device'
  | 'location'
  | 'language'
  | 'plan';

export interface AnalyticsFilters {
  userId?: string;
  noteId?: string;
  categoryId?: string;
  tagId?: string;
  plan?: string;
  device?: string;
  location?: string;
  language?: string;
}

export interface AnalyticsOptions {
  compareWith?: TimeRange;
  includePrevious?: boolean;
  includeForecast?: boolean;
  confidenceLevel?: number;
  limit?: number;
  offset?: number;
}

export interface AnalyticsResponse {
  data: AnalyticsDataPoint[];
  summary: AnalyticsSummary;
  metadata: AnalyticsMetadata;
}

export interface AnalyticsDataPoint {
  dimensions: Record<string, any>;
  metrics: Record<AnalyticsMetric, number>;
  timestamp?: string;
}

export interface AnalyticsSummary {
  total: Record<AnalyticsMetric, number>;
  average: Record<AnalyticsMetric, number>;
  min: Record<AnalyticsMetric, number>;
  max: Record<AnalyticsMetric, number>;
  growth?: Record<AnalyticsMetric, {
    absolute: number;
    percentage: number;
  }>;
}

export interface AnalyticsMetadata {
  request: AnalyticsRequest;
  generatedAt: string;
  dataPoints: number;
  hasMore: boolean;
  nextToken?: string;
}

export interface DashboardData {
  overview: {
    totalNotes: number;
    totalUsers: number;
    totalViews: number;
    totalEngagement: number;
  };
  trends: {
    notes: AnalyticsDataPoint[];
    users: AnalyticsDataPoint[];
    views: AnalyticsDataPoint[];
    engagement: AnalyticsDataPoint[];
  };
  topContent: Array<{
    note: Note;
    metrics: Record<string, number>;
  }>;
  userSegments: Array<{
    segment: string;
    count: number;
    percentage: number;
    metrics: Record<string, number>;
  }>;
  recommendations: Array<{
    type: string;
    title: string;
    description: string;
    priority: 'low' | 'medium' | 'high';
    potentialImpact: string;
  }>;
}

// ============================================================================
// T111 通知API类型
// ============================================================================

export interface Notification {
  id: string;
  userId: string;
  type: NotificationType;
  title: string;
  message: string;
  data?: Record<string, any>;
  channels: NotificationChannel[];
  status: 'pending' | 'sent' | 'delivered' | 'read' | 'failed';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  scheduledAt?: string;
  sentAt?: string;
  readAt?: string;
  expiresAt?: string;
  metadata: NotificationMetadata;
  createdAt: string;
  updatedAt: string;
}

export type NotificationType =
  | 'comment'
  | 'like'
  | 'follow'
  | 'mention'
  | 'share'
  | 'system'
  | 'maintenance'
  | 'security'
  | 'billing'
  | 'feature'
  | 'reminder'
  | 'digest';

export type NotificationChannel = 'email' | 'push' | 'inApp' | 'sms' | 'webhook';

export interface NotificationMetadata {
  source: 'system' | 'user' | 'auto';
  category: string;
  template?: string;
  variables?: Record<string, any>;
  tracking?: {
    campaign?: string;
    source?: string;
    medium?: string;
  };
  delivery?: {
    attempts: number;
    lastAttempt?: string;
    nextRetry?: string;
    error?: string;
  };
}

export interface CreateNotificationRequest {
  userId: string;
  type: NotificationType;
  title: string;
  message: string;
  channels?: NotificationChannel[];
  priority?: 'low' | 'medium' | 'high' | 'urgent';
  scheduledAt?: string;
  expiresAt?: string;
  data?: Record<string, any>;
  template?: string;
  variables?: Record<string, any>;
}

export interface UpdateNotificationRequest extends Partial<CreateNotificationRequest> {
  id: string;
}

export interface NotificationFilters {
  type?: NotificationType[];
  status?: ('pending' | 'sent' | 'delivered' | 'read' | 'failed')[];
  channels?: NotificationChannel[];
  priority?: ('low' | 'medium' | 'high' | 'urgent')[];
  dateRange?: {
    start: string;
    end: string;
  };
  unread?: boolean;
  category?: string;
  sortBy?: 'createdAt' | 'scheduledAt' | 'priority' | 'type';
  sortOrder?: 'asc' | 'desc';
}

export interface NotificationTemplate {
  id: string;
  name: string;
  type: NotificationType;
  channels: NotificationChannel[];
  subjectTemplate?: string;
  bodyTemplate: string;
  variables: TemplateVariable[];
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface TemplateVariable {
  name: string;
  type: 'string' | 'number' | 'boolean' | 'date';
  required: boolean;
  description?: string;
  defaultValue?: any;
}

export interface NotificationPreferences {
  userId: string;
  globalSettings: {
    enabled: boolean;
    quietHours: {
      enabled: boolean;
      start: string;
      end: string;
      timezone: string;
    };
    frequency: {
      immediate: NotificationType[];
      hourly: NotificationType[];
      daily: NotificationType[];
      weekly: NotificationType[];
    };
  };
  channelSettings: Record<NotificationChannel, {
    enabled: boolean;
    address?: string;
    settings?: Record<string, any>;
  }>;
  typeSettings: Record<NotificationType, {
    enabled: boolean;
    channels: NotificationChannel[];
    priority?: 'low' | 'medium' | 'high' | 'urgent';
  }>;
}

export interface BatchNotificationOperation {
  userIds: string[];
  notification: Omit<CreateNotificationRequest, 'userId'>;
  options?: {
    batchSize?: number;
    delayBetweenBatches?: number;
    skipDuplicates?: boolean;
    dryRun?: boolean;
  };
}

// ============================================================================
// WebSocket 实时事件类型
// ============================================================================

export interface WebSocketEvent {
  type: string;
  data: any;
  userId?: string;
  sessionId?: string;
  timestamp: string;
  id: string;
}

export interface RealtimeEventTypes {
  // 笔记相关
  'note:created': { note: Note };
  'note:updated': { note: Note; changes: string[] };
  'note:deleted': { noteId: string; reason?: string };
  'note:viewed': { noteId: string; userId: string };

  // 标签相关
  'tag:created': { tag: Tag };
  'tag:updated': { tag: Tag };
  'tag:deleted': { tagId: string };
  'tag:merged': { fromTag: Tag; toTag: Tag };

  // 用户相关
  'user:online': { userId: string; status: 'online' };
  'user:offline': { userId: string; status: 'offline' };
  'user:updated': { user: User };

  // 搜索相关
  'search:performed': { query: string; userId: string; results: number };
  'search:trending': { queries: string[] };

  // 通知相关
  'notification:new': { notification: Notification };
  'notification:read': { notificationId: string; userId: string };

  // 系统相关
  'system:maintenance': { message: string; startTime: string; endTime: string };
  'system:announcement': { message: string; type: 'info' | 'warning' | 'error' };
}