/**
 * Ëá™Âä®ÂàÜÁ±ªÊúçÂä°ÈõÜÊàêÊµãËØïËÑöÊú¨ - T104
 * ÊµãËØïÂÆåÊï¥ÁöÑËá™Âä®ÂàÜÁ±ªÂäüËÉΩÔºåÂåÖÊã¨20+ÁßçÂàÜÁ±ª‰ΩìÁ≥ª„ÄÅÂ§öÁ∫ßÂàÜÁ±ªÂíåËá™ÂÆö‰πâÂàÜÁ±ª
 */

import { createClassificationService } from './classification-service';
import { ContentCategory, ClassificationRequest, ClassificationOptions } from './types';

async function testBasicClassification() {
  console.log('üß™ ÂºÄÂßãÊµãËØïÂü∫Á°ÄÂàÜÁ±ªÂäüËÉΩ...\n');

  try {
    // ÂàõÂª∫ÂàÜÁ±ªÊúçÂä°
    console.log('1Ô∏è‚É£ ÂàõÂª∫ÂàÜÁ±ªÊúçÂä°...');
    const service = createClassificationService({
      algorithm: 'hybrid',
      confidenceThreshold: 0.6,
      maxCategories: 3,
      enableSubcategories: true,
      cacheEnabled: true
    });
    console.log('‚úÖ ÂàÜÁ±ªÊúçÂä°ÂàùÂßãÂåñÊàêÂäü');

    // Ê£ÄÊü•È¢ÑÂÆö‰πâÂàÜÁ±ª
    console.log('\n2Ô∏è‚É£ Ê£ÄÊü•È¢ÑÂÆö‰πâÂàÜÁ±ª‰ΩìÁ≥ª...');
    const categories = service.getCategories();
    console.log(`Â∑≤ÈÖçÁΩÆ ${categories.length} ‰∏™È¢ÑÂÆö‰πâÂàÜÁ±ª:`);

    const level1Categories = categories.filter(c => c.level === 1);
    const level2Categories = categories.filter(c => c.level === 2);

    console.log(`- ‰∏ÄÁ∫ßÂàÜÁ±ª: ${level1Categories.length} ‰∏™`);
    level1Categories.forEach(cat => {
      console.log(`  ${cat.icon} ${cat.name} (${cat.id}): ${cat.description}`);
      console.log(`    ÂÖ≥ÈîÆËØç: ${cat.keywords.slice(0, 5).join(', ')}...`);
    });

    console.log(`- ‰∫åÁ∫ßÂàÜÁ±ª: ${level2Categories.length} ‰∏™`);
    const parentCategories = [...new Set(level2Categories.map(c => c.parentId))];
    parentCategories.forEach(parentId => {
      const subcategories = level2Categories.filter(c => c.parentId === parentId);
      const parent = level1Categories.find(c => c.id === parentId);
      console.log(`  ${parent?.icon} ${parent?.name} ÁöÑÂ≠êÂàÜÁ±ª:`);
      subcategories.forEach(sub => {
        console.log(`    - ${sub.name}: ${sub.description}`);
      });
    });

    console.log('\n3Ô∏è‚É£ ÊµãËØï‰∏çÂêåÁ±ªÂûãÂÜÖÂÆπÁöÑÂàÜÁ±ª...');

    const testCases = [
      {
        name: 'ÁßëÊäÄÂÜÖÂÆπ',
        content: `
‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÊ≠£Âú®Âø´ÈÄüÂèëÂ±ïÔºåÊ∑±Â∫¶Â≠¶‰π†ÂíåÊú∫Âô®Â≠¶‰π†ÁÆóÊ≥ïÂú®ÂêÑ‰∏™È¢ÜÂüüÈÉΩÊúâÂπøÊ≥õÂ∫îÁî®„ÄÇ
WebÂºÄÂèëÊäÄÊúØÂåÖÊã¨ÂâçÁ´ØÊ°ÜÊû∂React„ÄÅVueÂíåÂêéÁ´ØNode.jsÁ≠â„ÄÇÁßªÂä®ÂºÄÂèëÊñπÈù¢ÔºåiOSÂíåAndroidÂ∫îÁî®ÂºÄÂèë
ÈúÄË¶ÅÊéåÊè°Swift„ÄÅKotlinÁ≠âÁºñÁ®ãËØ≠Ë®Ä„ÄÇAIÊäÄÊúØÁöÑÂèëÂ±ï‰∏∫ËΩØ‰ª∂Â∑•Á®ãÂ∏àÂ∏¶Êù•‰∫ÜÊñ∞ÁöÑÊú∫ÈÅáÂíåÊåëÊàò„ÄÇ
        `.trim(),
        expectedCategories: ['technology']
      },
      {
        name: 'ÂïÜ‰∏öÂÜÖÂÆπ',
        content: `
Âàõ‰∏öÂÖ¨Âè∏ÈúÄË¶ÅÂÖ≥Ê≥®Â∏ÇÂú∫ÈúÄÊ±ÇÂíåÂïÜ‰∏öÊ®°ÂºèËÆæËÆ°„ÄÇÊúâÊïàÁöÑËê•ÈîÄÁ≠ñÁï•ËÉΩÂ§üÂ∏ÆÂä©‰ºÅ‰∏öÂø´ÈÄüÊàêÈïø„ÄÇ
È£éÈô©ÊäïËµÑ‰∏∫ÂàùÂàõÂÖ¨Âè∏Êèê‰æõËµÑÈáëÊîØÊåÅÔºå‰ΩÜÈúÄË¶ÅÊ∏ÖÊô∞ÁöÑÂïÜ‰∏öËÆ°ÂàíÂíåÂ∏ÇÂú∫ÂÆö‰Ωç„ÄÇ
Ë¥¢Âä°ÁÆ°ÁêÜÊòØ‰ºÅ‰∏öÂèëÂ±ïÁöÑÈáçË¶ÅÂü∫Á°ÄÔºåÈúÄË¶ÅÂêàÁêÜËßÑÂàíËµÑÈáë‰ΩøÁî®ÂíåÊàêÊú¨ÊéßÂà∂„ÄÇ
        `.trim(),
        expectedCategories: ['business']
      },
      {
        name: 'ÊïôËÇ≤ÂÜÖÂÆπ',
        content: `
Â≠¶‰π†ÁºñÁ®ãÈúÄË¶ÅÊéåÊè°Êï∞ÊçÆÁªìÊûÑ„ÄÅÁÆóÊ≥ïÂíåËÆæËÆ°Ê®°Âºè„ÄÇÂú®Á∫øÊïôËÇ≤Âπ≥Âè∞‰∏∫Â≠¶‰π†ËÄÖÊèê‰æõ‰∫Ü‰æøÂà©„ÄÇ
Ëã±ËØ≠Â≠¶‰π†ÈúÄË¶ÅÊ≥®ÈáçÂê¨„ÄÅËØ¥„ÄÅËØª„ÄÅÂÜôÂõõ‰∏™ÊñπÈù¢ÁöÑÁªºÂêàËÆ≠ÁªÉ„ÄÇËÅå‰∏öÊäÄËÉΩÂüπËÆ≠Â∏ÆÂä©‰∫∫‰ª¨
ÊèêÂçáËÅåÂú∫Á´û‰∫âÂäõÔºåËé∑ÂæóÊõ¥Â•ΩÁöÑÂ∑•‰ΩúÊú∫‰ºö„ÄÇ
        `.trim(),
        expectedCategories: ['education']
      },
      {
        name: 'ÂÅ•Â∫∑ÂÜÖÂÆπ',
        content: `
‰øùÊåÅÂÅ•Â∫∑ÁöÑË∫´‰ΩìÈúÄË¶ÅÂÆöÊúüËøêÂä®ÂíåÂùáË°°Ëê•ÂÖª„ÄÇÂøÉÁêÜÂÅ•Â∫∑ÂêåÊ†∑ÈáçË¶ÅÔºåÈúÄË¶ÅÂ≠¶‰ºöÂéãÂäõÁÆ°ÁêÜ
ÂíåÊÉÖÁª™Ë∞ÉËäÇ„ÄÇÂÆöÊúü‰ΩìÊ£ÄËÉΩÂ§üÂèäÊó©ÂèëÁé∞ÊΩúÂú®ÁöÑÂÅ•Â∫∑ÈóÆÈ¢ò„ÄÇËøêÂä®ÂÅ•Ë∫´‰∏ç‰ªÖËÉΩÂ§üÂ¢ûÂº∫‰ΩìË¥®Ôºå
ËøòËÉΩÊîπÂñÑÂøÉÁêÜÂÅ•Â∫∑Áä∂ÂÜµ„ÄÇ
        `.trim(),
        expectedCategories: ['health']
      },
      {
        name: 'Ê∑∑ÂêàÂÜÖÂÆπ',
        content: `
‰∫∫Â∑•Êô∫ËÉΩÂú®ÂåªÁñóÂÅ•Â∫∑È¢ÜÂüüÁöÑÂ∫îÁî®‰∏∫Âàõ‰∏öÂÖ¨Âè∏Êèê‰æõ‰∫ÜÊñ∞ÁöÑÂïÜÊú∫„ÄÇÈÄöËøáÊ∑±Â∫¶Â≠¶‰π†ÁÆóÊ≥ïÔºå
ÂèØ‰ª•ËæÖÂä©ÂåªÁîüËøõË°åÁñæÁóÖËØäÊñ≠ÔºåÊèêÈ´òÂåªÁñóÊïàÁéá„ÄÇËøôÁßçÊäÄÊúØÂàõÊñ∞‰∏ç‰ªÖÊé®Âä®‰∫ÜÂåªÁñóË°å‰∏öÁöÑÂèëÂ±ïÔºå
‰πü‰∏∫ÂïÜ‰∏öÊäïËµÑÂºÄËæü‰∫ÜÊñ∞ÁöÑÊñπÂêë„ÄÇ
        `.trim(),
        expectedCategories: ['technology', 'health', 'business']
      }
    ];

    for (const testCase of testCases) {
      console.log(`\nÊµãËØï${testCase.name}:`);
      console.log(`ÂÜÖÂÆπÈïøÂ∫¶: ${testCase.content.length} Â≠óÁ¨¶`);

      const request: ClassificationRequest = {
        content: testCase.content,
        userId: 'test-user-001',
        options: {
          maxCategories: 5,
          minConfidence: 0.5,
          includeSubcategories: true,
          detailed: true
        }
      };

      const result = await service.classify(request);

      console.log(`‚úÖ ËØÜÂà´Âà∞ ${result.categories.length} ‰∏™ÂàÜÁ±ª:`);
      result.categories.forEach((classified, index) => {
        console.log(`${index + 1}. ${classified.category.icon} ${classified.category.name} (${classified.category.id})`);
        console.log(`   ÁΩÆ‰ø°Â∫¶: ${(classified.confidence * 100).toFixed(1)}%`);
        console.log(`   ÂåπÈÖçÂÖ≥ÈîÆËØç: ${classified.matchedKeywords.join(', ')}`);
        console.log(`   Êé®ÁêÜ: ${classified.reasoning}`);

        if (classified.subcategories && classified.subcategories.length > 0) {
          console.log(`   Â≠êÂàÜÁ±ª:`);
          classified.subcategories.forEach((sub, subIndex) => {
            console.log(`     ${subIndex + 1}. ${sub.category.name} (${(sub.confidence * 100).toFixed(1)}%)`);
            console.log(`        ÂåπÈÖç: ${sub.matchedKeywords.join(', ')}`);
          });
        }
      });

      // È™åËØÅÈ¢ÑÊúüÂàÜÁ±ª
      const foundCategories = result.categories.map(c => c.category.id);
      const expectedFound = testCase.expectedCategories.filter(expected =>
        foundCategories.includes(expected) || foundCategories.some(found =>
          testCase.expectedCategories.some(exp => found.includes(exp))
        )
      );

      if (expectedFound.length > 0) {
        console.log(`‚úÖ ÊàêÂäüËØÜÂà´È¢ÑÊúüÂàÜÁ±ª: ${expectedFound.join(', ')}`);
      } else {
        console.log(`‚ö†Ô∏è Êú™ËÉΩËØÜÂà´È¢ÑÊúüÂàÜÁ±ª: ${testCase.expectedCategories.join(', ')}`);
      }

      console.log(`Â§ÑÁêÜÊó∂Èó¥: ${result.metadata.processingTime}ms`);
      console.log(`ÁÆóÊ≥ï: ${result.metadata.algorithm}`);
    }

    console.log('\n‚úÖ Âü∫Á°ÄÂàÜÁ±ªÂäüËÉΩÊµãËØïÂÆåÊàêÔºÅ');
    return true;

  } catch (error) {
    console.error('‚ùå Âü∫Á°ÄÂàÜÁ±ªÂäüËÉΩÊµãËØïÂ§±Ë¥•:', error);
    return false;
  }
}

async function testCustomCategories() {
  console.log('\nüéØ ÂºÄÂßãÊµãËØïËá™ÂÆö‰πâÂàÜÁ±ªÂäüËÉΩ...\n');

  try {
    const service = createClassificationService({
      confidenceThreshold: 0.5,
      enableUserCategories: true
    });

    console.log('1Ô∏è‚É£ Ê∑ªÂä†Ëá™ÂÆö‰πâÂàÜÁ±ª...');

    const customCategories: ContentCategory[] = [
      {
        id: 'cryptocurrency',
        name: 'Âä†ÂØÜË¥ßÂ∏Å',
        description: '‰∏éÂå∫ÂùóÈìæ„ÄÅÂä†ÂØÜË¥ßÂ∏Å„ÄÅÊï∞Â≠óËµÑ‰∫ßÁõ∏ÂÖ≥ÁöÑÂÜÖÂÆπ',
        level: 1,
        keywords: ['ÊØîÁâπÂ∏Å', '‰ª•Â§™Âùä', 'Âå∫ÂùóÈìæ', 'Âä†ÂØÜË¥ßÂ∏Å', 'Êï∞Â≠óË¥ßÂ∏Å', 'DeFi', 'NFT', 'ÊåñÁüø'],
        confidence: 0.9,
        color: '#F59E0B',
        icon: '‚Çø'
      },
      {
        id: 'sustainability',
        name: 'ÂèØÊåÅÁª≠ÂèëÂ±ï',
        description: '‰∏éÁéØÂ¢É‰øùÊä§„ÄÅÂèØÊåÅÁª≠ÂèëÂ±ï„ÄÅÁªøËâ≤ËÉΩÊ∫êÁõ∏ÂÖ≥ÁöÑÂÜÖÂÆπ',
        level: 1,
        keywords: ['ÂèØÊåÅÁª≠ÂèëÂ±ï', 'ÁéØÂ¢É‰øùÊä§', 'ÁªøËâ≤ËÉΩÊ∫ê', 'Á¢≥‰∏≠Âíå', 'Ê∞îÂÄôÂèòÂåñ', 'Êñ∞ËÉΩÊ∫ê', ' recycling'],
        confidence: 0.9,
        color: '#10B981',
        icon: 'üå±'
      },
      {
        id: 'gaming',
        name: 'Ê∏∏Êàè',
        description: '‰∏éÁîµÂ≠êÊ∏∏Êàè„ÄÅÊ∏∏ÊàèÂºÄÂèë„ÄÅÊ∏∏Êàè‰∫ß‰∏öÁõ∏ÂÖ≥ÁöÑÂÜÖÂÆπ',
        level: 1,
        keywords: ['Ê∏∏Êàè', 'ÁîµÂ≠êÊ∏∏Êàè', 'Ê∏∏ÊàèÂºÄÂèë', 'Ê∏∏ÊàèËÆæËÆ°', 'Unity', 'Unreal Engine', 'ÁîµÁ´û', 'Ê∏∏Êàè‰∫ß‰∏ö'],
        confidence: 0.9,
        color: '#8B5CF6',
        icon: 'üéÆ'
      }
    ];

    for (const category of customCategories) {
      await service.addCustomCategory(category);
      console.log(`‚úÖ Ê∑ªÂä†Ëá™ÂÆö‰πâÂàÜÁ±ª: ${category.name} (${category.id})`);
    }

    console.log('\n2Ô∏è‚É£ ÊµãËØïËá™ÂÆö‰πâÂàÜÁ±ªËØÜÂà´...');

    const customTestCases = [
      {
        name: 'Âä†ÂØÜË¥ßÂ∏ÅÂÜÖÂÆπ',
        content: 'ÊØîÁâπÂ∏ÅÂíå‰ª•Â§™ÂùäÊòØ‰∏ªÊµÅÁöÑÂä†ÂØÜË¥ßÂ∏ÅÔºåÂå∫ÂùóÈìæÊäÄÊúØ‰∏∫DeFiÂíåNFTÊèê‰æõ‰∫ÜÂü∫Á°ÄËÆæÊñΩ„ÄÇÊï∞Â≠óË¥ßÂ∏ÅÊåñÁüøÈúÄË¶ÅÂ§ßÈáèÁöÑËÆ°ÁÆóËµÑÊ∫ê„ÄÇ',
        expectedCustomCategory: 'cryptocurrency'
      },
      {
        name: 'ÂèØÊåÅÁª≠ÂèëÂ±ïÂÜÖÂÆπ',
        content: 'ÁªøËâ≤ËÉΩÊ∫êÂíåÂèØÊåÅÁª≠ÂèëÂ±ïÊòØÂÖ®ÁêÉÂÖ≥Ê≥®ÁöÑÈáçË¶ÅËÆÆÈ¢ò„ÄÇÁ¢≥‰∏≠ÂíåÁõÆÊ†áÊé®Âä®‰∫ÜÊñ∞ËÉΩÊ∫êÊäÄÊúØÁöÑÂø´ÈÄüÂèëÂ±ïÔºåÁéØÂ¢É‰øùÊä§ÊÑèËØÜ‰πüÂú®‰∏çÊñ≠ÊèêÈ´ò„ÄÇ',
        expectedCustomCategory: 'sustainability'
      },
      {
        name: 'Ê∏∏ÊàèÂÜÖÂÆπ',
        content: 'UnityÂíåUnreal EngineÊòØ‰∏ªÊµÅÁöÑÊ∏∏ÊàèÂºÄÂèëÂºïÊìé„ÄÇÁîµÂ≠êÁ´ûÊäÄ‰∫ß‰∏öÁöÑÂø´ÈÄüÂèëÂ±ï‰∏∫Ê∏∏ÊàèÂºÄÂèëËÄÖÂàõÈÄ†‰∫ÜÊñ∞ÁöÑÊú∫ÈÅá„ÄÇÊ∏∏ÊàèËÆæËÆ°ÈúÄË¶ÅËÄÉËôëÁé©ÂÆ∂‰ΩìÈ™åÂíåÂïÜ‰∏öÊ®°Âºè„ÄÇ',
        expectedCustomCategory: 'gaming'
      }
    ];

    for (const testCase of customTestCases) {
      console.log(`\nÊµãËØï${testCase.name}:`);

      const request: ClassificationRequest = {
        content: testCase.content,
        userId: 'custom-test-user',
        options: {
          maxCategories: 5,
          minConfidence: 0.4
        }
      };

      const result = await service.classify(request);

      const customCategory = result.categories.find(c => c.category.id === testCase.expectedCustomCategory);

      if (customCategory) {
        console.log(`‚úÖ ÊàêÂäüËØÜÂà´Ëá™ÂÆö‰πâÂàÜÁ±ª: ${customCategory.category.name}`);
        console.log(`   ÁΩÆ‰ø°Â∫¶: ${(customCategory.confidence * 100).toFixed(1)}%`);
        console.log(`   ÂåπÈÖçÂÖ≥ÈîÆËØç: ${customCategory.matchedKeywords.join(', ')}`);
      } else {
        console.log(`‚ö†Ô∏è Êú™ËÉΩËØÜÂà´Ëá™ÂÆö‰πâÂàÜÁ±ª: ${testCase.expectedCustomCategory}`);
        console.log(`ËØÜÂà´Âà∞ÁöÑÂàÜÁ±ª: ${result.categories.map(c => c.category.name).join(', ')}`);
      }
    }

    console.log('\n3Ô∏è‚É£ ÊµãËØïËá™ÂÆö‰πâÂàÜÁ±ªÁÆ°ÁêÜ...');

    // ÊµãËØïÊõ¥Êñ∞ÂàÜÁ±ª
    console.log('Êõ¥Êñ∞Âä†ÂØÜË¥ßÂ∏ÅÂàÜÁ±ª...');
    await service.updateCategory('cryptocurrency', {
      description: 'Êõ¥Êñ∞ÂêéÁöÑÊèèËø∞ÔºöÊ∂µÁõñÊâÄÊúâÊï∞Â≠óËµÑ‰∫ßÂíåÂå∫ÂùóÈìæÊäÄÊúØ',
      keywords: ['ÊØîÁâπÂ∏Å', '‰ª•Â§™Âùä', 'Âå∫ÂùóÈìæ', 'Âä†ÂØÜË¥ßÂ∏Å', 'Êï∞Â≠óË¥ßÂ∏Å', 'DeFi', 'NFT', 'ÊåñÁüø', 'Web3', 'Âéª‰∏≠ÂøÉÂåñ']
    });

    // ÊµãËØïÂàÜÁ±ªÁªüËÆ°
    console.log('\nËé∑ÂèñÂàÜÁ±ªÁªüËÆ°...');
    const stats = service.getCategoryStats();
    const customStats = stats.filter(s =>
      customCategories.some(c => c.id === s.categoryId)
    );

    console.log('Ëá™ÂÆö‰πâÂàÜÁ±ª‰ΩøÁî®ÁªüËÆ°:');
    customStats.forEach(stat => {
      console.log(`- ${stat.name}: ‰ΩøÁî®${stat.usageCount}Ê¨°, Âπ≥ÂùáÁΩÆ‰ø°Â∫¶${(stat.averageConfidence * 100).toFixed(1)}%`);
    });

    console.log('\n‚úÖ Ëá™ÂÆö‰πâÂàÜÁ±ªÂäüËÉΩÊµãËØïÂÆåÊàêÔºÅ');
    return true;

  } catch (error) {
    console.error('‚ùå Ëá™ÂÆö‰πâÂàÜÁ±ªÂäüËÉΩÊµãËØïÂ§±Ë¥•:', error);
    return false;
  }
}

async function testClassificationAlgorithms() {
  console.log('\n‚öôÔ∏è ÂºÄÂßãÊµãËØï‰∏çÂêåÂàÜÁ±ªÁÆóÊ≥ï...\n');

  try {
    const testContent = `
‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÂú®Áé∞‰ª£ËΩØ‰ª∂ÂºÄÂèë‰∏≠ÂèëÊå•ÁùÄÈáçË¶Å‰ΩúÁî®„ÄÇÊ∑±Â∫¶Â≠¶‰π†ÁÆóÊ≥ïËÉΩÂ§üÂ∏ÆÂä©ÂºÄÂèëËÄÖ
ÂàõÂª∫Êô∫ËÉΩÂ∫îÁî®ÔºåËÄåÊú∫Âô®Â≠¶‰π†Ê°ÜÊû∂Â¶ÇTensorFlowÂíåPyTorch‰∏∫AIÂºÄÂèëÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÂ∑•ÂÖ∑„ÄÇ
WebÂºÄÂèëËÄÖÂèØ‰ª•Âà©Áî®Ëøô‰∫õÊäÄÊúØÊûÑÂª∫Êõ¥Êô∫ËÉΩÁöÑÁî®Êà∑‰ΩìÈ™å„ÄÇ
    `.trim();

    console.log('ÊµãËØïÂÜÖÂÆπÈïøÂ∫¶:', testContent.length, 'Â≠óÁ¨¶');

    const algorithms = [
      { name: 'ÂÖ≥ÈîÆËØçÂàÜÁ±ª', algorithm: 'keyword-based' as const },
      { name: 'Êú∫Âô®Â≠¶‰π†ÂàÜÁ±ª', algorithm: 'ml-based' as const },
      { name: 'Ê∑∑ÂêàÂàÜÁ±ª', algorithm: 'hybrid' as const }
    ];

    const results: Array<{ name: string; result: any; time: number }> = [];

    for (const { name, algorithm } of algorithms) {
      console.log(`\n${name}ÁÆóÊ≥ïÊµãËØï:`);

      const service = createClassificationService({
        algorithm,
        confidenceThreshold: 0.5,
        cacheEnabled: false // Á¶ÅÁî®ÁºìÂ≠ò‰ª•Á°Æ‰øùÂÖ¨Âπ≥ÊØîËæÉ
      });

      const startTime = Date.now();

      const request: ClassificationRequest = {
        content: testContent,
        userId: 'algorithm-test-user',
        options: {
          maxCategories: 5,
          includeSubcategories: true
        }
      };

      const result = await service.classify(request);
      const processingTime = Date.now() - startTime;

      console.log(`‚úÖ Â§ÑÁêÜÊó∂Èó¥: ${processingTime}ms`);
      console.log(`‚úÖ ËØÜÂà´ÂàÜÁ±ªÊï∞: ${result.categories.length}`);
      console.log(`‚úÖ ‰∏ªË¶ÅÂàÜÁ±ª: ${result.categories.slice(0, 3).map(c => `${c.category.name}(${(c.confidence * 100).toFixed(1)}%)`).join(', ')}`);

      if (result.categories[0]?.subcategories?.length) {
        console.log(`‚úÖ Â≠êÂàÜÁ±ªÊï∞: ${result.categories[0].subcategories.length}`);
      }

      results.push({ name, result, time: processingTime });
    }

    console.log('\nüìä ÁÆóÊ≥ïÊÄßËÉΩÊØîËæÉ:');
    results.forEach(({ name, result, time }) => {
      const avgConfidence = result.categories.reduce((sum: number, c: any) => sum + c.confidence, 0) / result.categories.length;
      console.log(`${name}:`);
      console.log(`  - Â§ÑÁêÜÊó∂Èó¥: ${time}ms`);
      console.log(`  - ÂàÜÁ±ªÊï∞Èáè: ${result.categories.length}`);
      console.log(`  - Âπ≥ÂùáÁΩÆ‰ø°Â∫¶: ${(avgConfidence * 100).toFixed(1)}%`);
      console.log(`  - ÁÆóÊ≥ï: ${result.metadata.algorithm}`);
    });

    // ÊâæÂá∫ÊúÄ‰Ω≥ÁÆóÊ≥ï
    const bestByConfidence = results.reduce((best, current) => {
      const currentAvg = current.result.categories.reduce((sum: number, c: any) => sum + c.confidence, 0) / current.result.categories.length;
      const bestAvg = best.result.categories.reduce((sum: number, c: any) => sum + c.confidence, 0) / best.result.categories.length;
      return currentAvg > bestAvg ? current : best;
    });

    console.log(`\nüèÜ ÊúÄ‰Ω≥ÁΩÆ‰ø°Â∫¶ÁÆóÊ≥ï: ${bestByConfidence.name}`);

    console.log('\n‚úÖ ÂàÜÁ±ªÁÆóÊ≥ïÊµãËØïÂÆåÊàêÔºÅ');
    return true;

  } catch (error) {
    console.error('‚ùå ÂàÜÁ±ªÁÆóÊ≥ïÊµãËØïÂ§±Ë¥•:', error);
    return false;
  }
}

async function testPerformanceAndScalability() {
  console.log('\n‚ö° ÂºÄÂßãÊµãËØïÊÄßËÉΩÂíåÂèØÊâ©Â±ïÊÄß...\n');

  try {
    const service = createClassificationService({
      algorithm: 'keyword-based', // ‰ΩøÁî®ÊúÄÂø´ÁöÑÁÆóÊ≥ïËøõË°åÊÄßËÉΩÊµãËØï
      cacheEnabled: true
    });

    console.log('1Ô∏è‚É£ ÊµãËØï‰∏çÂêåÈïøÂ∫¶ÂÜÖÂÆπÁöÑÂ§ÑÁêÜÊÄßËÉΩ...');

    const lengthTests = [
      { name: 'Áü≠ÊñáÊú¨', content: '‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØ', expectedMaxTime: 100 },
      { name: '‰∏≠Á≠âÊñáÊú¨', content: '‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÂú®Áé∞‰ª£ËΩØ‰ª∂ÂºÄÂèë‰∏≠ÂèëÊå•ÁùÄÈáçË¶Å‰ΩúÁî®„ÄÇÊ∑±Â∫¶Â≠¶‰π†ÁÆóÊ≥ïËÉΩÂ§üÂ∏ÆÂä©ÂºÄÂèëËÄÖÂàõÂª∫Êô∫ËÉΩÂ∫îÁî®ÔºåËÄåÊú∫Âô®Â≠¶‰π†Ê°ÜÊû∂‰∏∫AIÂºÄÂèëÊèê‰æõ‰∫ÜÂº∫Â§ßÂ∑•ÂÖ∑„ÄÇ', expectedMaxTime: 200 },
      { name: 'ÈïøÊñáÊú¨', content: `
‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÊòØËÆ°ÁÆóÊú∫ÁßëÂ≠¶ÁöÑ‰∏Ä‰∏™ÈáçË¶ÅÂàÜÊîØÔºåÂÆÉËá¥Âäõ‰∫éÂàõÂª∫ËÉΩÂ§üÊâßË°åÈÄöÂ∏∏ÈúÄË¶Å‰∫∫Á±ªÊô∫ËÉΩÁöÑ‰ªªÂä°ÁöÑÁ≥ªÁªü„ÄÇ
ËøëÂπ¥Êù•ÔºåÈöèÁùÄËÆ°ÁÆóËÉΩÂäõÁöÑÊèêÂçáÂíåÂ§ßÊï∞ÊçÆÁöÑÊôÆÂèäÔºå‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÂèñÂæó‰∫ÜÁ™ÅÁ†¥ÊÄßËøõÂ±ï„ÄÇ

Ê∑±Â∫¶Â≠¶‰π†‰Ωú‰∏∫Êú∫Âô®Â≠¶‰π†ÁöÑ‰∏Ä‰∏™ÈáçË¶ÅÂàÜÊîØÔºåÈÄöËøáÊ®°Êãü‰∫∫ËÑëÁ•ûÁªèÁΩëÁªúÁöÑÁªìÊûÑÂíåÂäüËÉΩÔºå‰ΩøÂæóËÆ°ÁÆóÊú∫ËÉΩÂ§ü‰ªéÂ§ßÈáèÊï∞ÊçÆ‰∏≠Â≠¶‰π†Âπ∂ÂÅöÂá∫È¢ÑÊµãÊàñÂÜ≥Á≠ñ„ÄÇ
Âç∑ÁßØÁ•ûÁªèÁΩëÁªúÂú®ÂõæÂÉèËØÜÂà´È¢ÜÂüüÂèñÂæó‰∫ÜÂ∑®Â§ßÊàêÂäüÔºåËÄåÂæ™ÁéØÁ•ûÁªèÁΩëÁªúÂàôÂú®Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜ‰∏≠Ë°®Áé∞Âá∫Ëâ≤„ÄÇ

Ëá™ÁÑ∂ËØ≠Ë®ÄÂ§ÑÁêÜÊäÄÊúØËÆ©Êú∫Âô®ËÉΩÂ§üÁêÜËß£„ÄÅËß£ÈáäÂíåÁîüÊàê‰∫∫Á±ªËØ≠Ë®ÄÔºåËøôÂåÖÊã¨Êú∫Âô®ÁøªËØë„ÄÅÊÉÖÊÑüÂàÜÊûê„ÄÅÊñáÊú¨ÊëòË¶ÅÁ≠âÂ§ö‰∏™Â∫îÁî®È¢ÜÂüü„ÄÇ
Áé∞‰ª£NLPÊäÄÊúØÂπøÊ≥õÂ∫îÁî®‰∫éËÅäÂ§©Êú∫Âô®‰∫∫„ÄÅÊô∫ËÉΩÂÆ¢Êúç„ÄÅÂÜÖÂÆπÊé®ËçêÁ≠âÂÆûÈôÖÂú∫ÊôØ‰∏≠„ÄÇ

ËÆ°ÁÆóÊú∫ËßÜËßâÊäÄÊúØ‰ΩøÊú∫Âô®ËÉΩÂ§ü"ÁúãÊáÇ"ÂõæÂÉèÂíåËßÜÈ¢ëÔºåÂú®‰∫∫ËÑ∏ËØÜÂà´„ÄÅÁõÆÊ†áÊ£ÄÊµã„ÄÅÂåªÂ≠¶ÂΩ±ÂÉèÂàÜÊûêÁ≠âÊñπÈù¢ÊúâÂπøÊ≥õÂ∫îÁî®„ÄÇ
Ëá™Âä®È©æÈ©∂Ê±ΩËΩ¶‰æùËµñ‰∫éËÆ°ÁÆóÊú∫ËßÜËßâÊäÄÊúØÊù•ËØÜÂà´ÈÅìË∑Ø„ÄÅËΩ¶ËæÜ„ÄÅË°å‰∫∫Á≠âÁâ©‰Ωì„ÄÇ

Âº∫ÂåñÂ≠¶‰π†ÈÄöËøá‰∏éÁéØÂ¢É‰∫§‰∫íÊù•Â≠¶‰π†ÊúÄ‰ºòÁ≠ñÁï•ÔºåÂú®Ê∏∏Êàè„ÄÅÊú∫Âô®‰∫∫ÊéßÂà∂„ÄÅÊé®ËçêÁ≥ªÁªüÁ≠âÈ¢ÜÂüüÂèñÂæó‰∫ÜÊòæËëóÊàêÊûú„ÄÇ
AlphaGoÂáªË¥•‰∫∫Á±ªÂõ¥Ê£ãÂÜ†ÂÜõÂ∞±ÊòØÂº∫ÂåñÂ≠¶‰π†ÊäÄÊúØÁöÑ‰∏Ä‰∏™ÈáçË¶ÅÈáåÁ®ãÁ¢ë„ÄÇ

‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÁöÑÂèëÂ±ï‰∏ç‰ªÖÊîπÂèò‰∫ÜÁßëÊäÄË°å‰∏öÔºåËøòÊ∑±ÂàªÂΩ±ÂìçÁùÄÂåªÁñó„ÄÅÈáëËûç„ÄÅÊïôËÇ≤„ÄÅ‰∫§ÈÄöÁ≠âÂêÑ‰∏™È¢ÜÂüü„ÄÇ
Êú™Êù•ÔºåÈöèÁùÄÊäÄÊúØÁöÑ‰∏çÊñ≠ËøõÊ≠•Ôºå‰∫∫Â∑•Êô∫ËÉΩÂ∞ÜÂú®Êõ¥Â§öÂú∫ÊôØ‰∏≠ÂèëÊå•ÈáçË¶Å‰ΩúÁî®Ôºå‰∏∫‰∫∫Á±ªÁ§æ‰ºöÂ∏¶Êù•Êõ¥Â§ßÁöÑ‰ª∑ÂÄº„ÄÇ
      `.trim(), expectedMaxTime: 500 }
    ];

    for (const test of lengthTests) {
      console.log(`\nÊµãËØï${test.name} (ÈïøÂ∫¶: ${test.content.length} Â≠óÁ¨¶):`);

      const startTime = Date.now();

      const request: ClassificationRequest = {
        content: test.content,
        userId: 'performance-test-user',
        options: {
          maxCategories: 5,
          includeSubcategories: true
        }
      };

      const result = await service.classify(request);
      const processingTime = Date.now() - startTime;

      console.log(`‚úÖ Â§ÑÁêÜÊó∂Èó¥: ${processingTime}ms (ÊúüÊúõ < ${test.expectedMaxTime}ms)`);
      console.log(`‚úÖ ÂàÜÁ±ªÊï∞Èáè: ${result.categories.length}`);
      console.log(`‚úÖ TokenÂ§ÑÁêÜÈÄüÂ∫¶: ${(test.content.length / (processingTime / 1000)).toFixed(1)} Â≠óÁ¨¶/Áßí`);

      if (processingTime > test.expectedMaxTime) {
        console.log(`‚ö†Ô∏è Â§ÑÁêÜÊó∂Èó¥Ë∂ÖËøáÊúüÊúõÂÄº`);
      }
    }

    console.log('\n2Ô∏è‚É£ ÊµãËØïÂπ∂ÂèëÂ§ÑÁêÜËÉΩÂäõ...');

    const concurrentRequests = 10;
    const concurrentContent = 'Âπ∂ÂèëÊµãËØïÂÜÖÂÆπÔºö‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÂú®ÂêÑ‰∏™È¢ÜÂüüÈÉΩÊúâÈáçË¶ÅÂ∫îÁî®„ÄÇ';

    console.log(`ÂèëÈÄÅ ${concurrentRequests} ‰∏™Âπ∂ÂèëËØ∑Ê±Ç...`);

    const concurrentStartTime = Date.now();

    const concurrentPromises = Array.from({ length: concurrentRequests }, (_, i) =>
      service.classify({
        content: `${concurrentContent} (ËØ∑Ê±Ç ${i + 1})`,
        userId: 'concurrent-test-user',
        options: { maxCategories: 3 }
      })
    );

    const concurrentResults = await Promise.all(concurrentPromises);
    const concurrentEndTime = Date.now();

    const totalTime = concurrentEndTime - concurrentStartTime;
    const averageTime = totalTime / concurrentRequests;

    console.log(`‚úÖ Âπ∂ÂèëÂ§ÑÁêÜÂÆåÊàê:`);
    console.log(`  - ÊÄªËÄóÊó∂: ${totalTime}ms`);
    console.log(`  - Âπ≥ÂùáÊØè‰∏™ËØ∑Ê±Ç: ${averageTime.toFixed(1)}ms`);
    console.log(`  - ÊàêÂäüÂ§ÑÁêÜ: ${concurrentResults.filter(r => r.categories.length > 0).length}/${concurrentRequests}`);

    console.log('\n3Ô∏è‚É£ ÊµãËØïÁºìÂ≠òÊïàÊûú...');

    const cacheTestContent = 'ÁºìÂ≠òÊµãËØïÂÜÖÂÆπÔºöÊú∫Âô®Â≠¶‰π†ÂíåÊ∑±Â∫¶Â≠¶‰π†ÈÉΩÊòØ‰∫∫Â∑•Êô∫ËÉΩÁöÑÈáçË¶ÅÂàÜÊîØ„ÄÇ';

    // Á¨¨‰∏ÄÊ¨°Â§ÑÁêÜÔºàÊó†ÁºìÂ≠òÔºâ
    const firstStartTime = Date.now();
    await service.classify({
      content: cacheTestContent,
      userId: 'cache-test-user'
    });
    const firstTime = Date.now() - firstStartTime;

    // Á¨¨‰∫åÊ¨°Â§ÑÁêÜÔºàÊúâÁºìÂ≠òÔºâ
    const secondStartTime = Date.now();
    await service.classify({
      content: cacheTestContent,
      userId: 'cache-test-user'
    });
    const secondTime = Date.now() - secondStartTime;

    console.log(`‚úÖ ÁºìÂ≠òÊïàÊûúÊµãËØï:`);
    console.log(`  - È¶ñÊ¨°Â§ÑÁêÜ: ${firstTime}ms`);
    console.log(`  - ÁºìÂ≠òÂëΩ‰∏≠: ${secondTime}ms`);
    console.log(`  - ÊÄßËÉΩÊèêÂçá: ${((firstTime - secondTime) / firstTime * 100).toFixed(1)}%`);

    console.log('\n‚úÖ ÊÄßËÉΩÂíåÂèØÊâ©Â±ïÊÄßÊµãËØïÂÆåÊàêÔºÅ');
    return true;

  } catch (error) {
    console.error('‚ùå ÊÄßËÉΩÂíåÂèØÊâ©Â±ïÊÄßÊµãËØïÂ§±Ë¥•:', error);
    return false;
  }
}

async function testEdgeCasesAndErrorHandling() {
  console.log('\nüõ°Ô∏è ÂºÄÂßãÊµãËØïËæπÁïåÊÉÖÂÜµÂíåÈîôËØØÂ§ÑÁêÜ...\n');

  try {
    const service = createClassificationService({
      confidenceThreshold: 0.3, // Èôç‰ΩéÈòàÂÄº‰ª•ÊµãËØïËæπÁïåÊÉÖÂÜµ
      maxCategories: 10
    });

    console.log('1Ô∏è‚É£ ÊµãËØïËæπÁïåÊÉÖÂÜµ...');

    const edgeCases = [
      {
        name: 'Á©∫Â≠óÁ¨¶‰∏≤',
        content: '',
        expectedResult: 'empty'
      },
      {
        name: 'Âè™ÊúâÁ©∫Ê†º',
        content: '   ',
        expectedResult: 'empty'
      },
      {
        name: 'Âè™ÊúâÊ†áÁÇπÁ¨¶Âè∑',
        content: 'ÔºÅ@#Ôø•%‚Ä¶‚Ä¶&*ÔºàÔºâ',
        expectedResult: 'empty'
      },
      {
        name: 'Âçï‰∏™Â≠óÁ¨¶',
        content: 'ÊäÄ',
        expectedResult: 'low-confidence'
      },
      {
        name: 'Êó†ÂåπÈÖçÂÖ≥ÈîÆËØç',
        content: 'ËøôÊòØ‰∏ÄÊÆµÂÆåÂÖ®‰∏çÂåÖÂê´‰ªª‰ΩïÈ¢ÑÂÆö‰πâÂÖ≥ÈîÆËØçÁöÑÊµãËØïÊñáÊú¨ÂÜÖÂÆπ„ÄÇ',
        expectedResult: 'no-matches'
      },
      {
        name: 'Ê∑∑ÂêàËØ≠Ë®Ä',
        content: 'Artificial Intelligence ‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØ is very important for technology development.',
        expectedResult: 'mixed-language'
      }
    ];

    for (const testCase of edgeCases) {
      console.log(`\nÊµãËØï${testCase.name}:`);

      try {
        const request: ClassificationRequest = {
          content: testCase.content,
          userId: 'edge-case-test-user',
          options: {
            maxCategories: 5,
            minConfidence: 0.1 // Âæà‰ΩéÁöÑÈòàÂÄº
          }
        };

        const result = await service.classify(request);

        console.log(`‚úÖ Â§ÑÁêÜÊàêÂäüÔºåËØÜÂà´Âà∞ ${result.categories.length} ‰∏™ÂàÜÁ±ª`);

        if (result.categories.length === 0) {
          console.log(`   ÁªìÊûú: Êó†ÂåπÈÖçÂàÜÁ±ª (Á¨¶ÂêàÈ¢ÑÊúü)`);
        } else {
          result.categories.forEach((c, index) => {
            console.log(`   ${index + 1}. ${c.category.name} (${(c.confidence * 100).toFixed(1)}%)`);
          });
        }

      } catch (error) {
        console.log(`‚ùå Â§ÑÁêÜÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`);
      }
    }

    console.log('\n2Ô∏è‚É£ ÊµãËØïÈîôËØØÂ§ÑÁêÜ...');

    // ÊµãËØïÊó†ÊïàÈÄâÈ°π
    console.log('ÊµãËØïÊó†ÊïàÂàÜÁ±ªÈÄâÈ°π:');
    try {
      const request = {
        content: 'ÊµãËØïÂÜÖÂÆπ',
        userId: 'error-test-user',
        options: {
          maxCategories: -1, // Êó†ÊïàÂÄº
          minConfidence: 2,   // Êó†ÊïàÂÄº
          includeSubcategories: 'yes' as any // Á±ªÂûãÈîôËØØ
        }
      };

      const result = await service.classify(request);
      console.log('‚úÖ Êó†ÊïàÈÄâÈ°πÂ§ÑÁêÜÊ≠£Â∏∏Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº');

    } catch (error) {
      console.log(`‚ö†Ô∏è Êó†ÊïàÈÄâÈ°πÂØºËá¥ÈîôËØØ: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`);
    }

    // ÊµãËØïÊûÅÈïøÂÜÖÂÆπ
    console.log('\nÊµãËØïÊûÅÈïøÂÜÖÂÆπÂ§ÑÁêÜ:');
    try {
      const longContent = 'ÊµãËØï'.repeat(10000); // 40KB ÂÜÖÂÆπ
      console.log(`ÂÜÖÂÆπÈïøÂ∫¶: ${longContent.length} Â≠óÁ¨¶`);

      const request = {
        content: longContent,
        userId: 'long-content-test-user'
      };

      const startTime = Date.now();
      const result = await service.classify(request);
      const processingTime = Date.now() - startTime;

      console.log(`‚úÖ ÊûÅÈïøÂÜÖÂÆπÂ§ÑÁêÜÊàêÂäü`);
      console.log(`   Â§ÑÁêÜÊó∂Èó¥: ${processingTime}ms`);
      console.log(`   ËØÜÂà´ÂàÜÁ±ªÊï∞: ${result.categories.length}`);

    } catch (error) {
      console.log(`‚ùå ÊûÅÈïøÂÜÖÂÆπÂ§ÑÁêÜÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`);
    }

    console.log('\n3Ô∏è‚É£ ÊµãËØïÂàÜÁ±ªÁÆ°ÁêÜÈîôËØØ...');

    // ÊµãËØïÈáçÂ§çÂàÜÁ±ªID
    console.log('ÊµãËØïÈáçÂ§çÂàÜÁ±ªID:');
    try {
      await service.addCustomCategory({
        id: 'technology', // Â∑≤Â≠òÂú®ÁöÑID
        name: 'ÈáçÂ§çÂàÜÁ±ª',
        description: 'ÊµãËØïÈáçÂ§çID',
        level: 1,
        keywords: ['ÈáçÂ§ç'],
        confidence: 0.9
      });

      console.log('‚ùå Â∫îËØ•ÊãíÁªùÈáçÂ§çÂàÜÁ±ªID');

    } catch (error) {
      console.log('‚úÖ Ê≠£Á°ÆÊãíÁªùÈáçÂ§çÂàÜÁ±ªID');
    }

    // ÊµãËØïÂà†Èô§‰∏çÂ≠òÂú®ÁöÑÂàÜÁ±ª
    console.log('\nÊµãËØïÂà†Èô§‰∏çÂ≠òÂú®ÁöÑÂàÜÁ±ª:');
    try {
      await service.deleteCategory('non-existent-category');
      console.log('‚ùå Â∫îËØ•ÊãíÁªùÂà†Èô§‰∏çÂ≠òÂú®ÁöÑÂàÜÁ±ª');

    } catch (error) {
      console.log('‚úÖ Ê≠£Á°ÆÊãíÁªùÂà†Èô§‰∏çÂ≠òÂú®ÁöÑÂàÜÁ±ª');
    }

    // ÊµãËØïÂà†Èô§ÊúâÂ≠êÂàÜÁ±ªÁöÑÂàÜÁ±ª
    console.log('\nÊµãËØïÂà†Èô§ÊúâÂ≠êÂàÜÁ±ªÁöÑÂàÜÁ±ª:');
    try {
      await service.deleteCategory('technology'); // ÊúâÂ≠êÂàÜÁ±ª
      console.log('‚ùå Â∫îËØ•ÊãíÁªùÂà†Èô§ÊúâÂ≠êÂàÜÁ±ªÁöÑÂàÜÁ±ª');

    } catch (error) {
      console.log('‚úÖ Ê≠£Á°ÆÊãíÁªùÂà†Èô§ÊúâÂ≠êÂàÜÁ±ªÁöÑÂàÜÁ±ª');
    }

    console.log('\n‚úÖ ËæπÁïåÊÉÖÂÜµÂíåÈîôËØØÂ§ÑÁêÜÊµãËØïÂÆåÊàêÔºÅ');
    return true;

  } catch (error) {
    console.error('‚ùå ËæπÁïåÊÉÖÂÜµÂíåÈîôËØØÂ§ÑÁêÜÊµãËØïÂ§±Ë¥•:', error);
    return false;
  }
}

async function testSystemHealthAndMonitoring() {
  console.log('\nüìä ÂºÄÂßãÊµãËØïÁ≥ªÁªüÂÅ•Â∫∑ÂíåÁõëÊéßÂäüËÉΩ...\n');

  try {
    const service = createClassificationService({
      algorithm: 'hybrid',
      confidenceThreshold: 0.5,
      cacheEnabled: true
    });

    console.log('1Ô∏è‚É£ ÊµãËØïÁ≥ªÁªüÂÅ•Â∫∑Ê£ÄÊü•...');
    const health = await service.healthCheck();

    console.log('Á≥ªÁªüÂÅ•Â∫∑Áä∂ÊÄÅ:');
    console.log(`- Áä∂ÊÄÅ: ${health.status}`);
    console.log(`- Ê∂àÊÅØ: ${health.message}`);

    if (health.status === 'healthy') {
      console.log('‚úÖ Á≥ªÁªüÂÅ•Â∫∑Ê£ÄÊü•ÈÄöËøá');
    } else {
      console.log('‚ö†Ô∏è Á≥ªÁªüÂÅ•Â∫∑Ê£ÄÊü•ÂèëÁé∞ÈóÆÈ¢ò');
    }

    console.log('\n2Ô∏è‚É£ ÊµãËØïÂàÜÁ±ªÁªüËÆ°ÂäüËÉΩ...');

    // ÊâßË°å‰∏Ä‰∫õÂàÜÁ±ª‰ª•ÁîüÊàêÁªüËÆ°Êï∞ÊçÆ
    const testRequests = [
      { content: '‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÂèëÂ±ïËøÖÈÄü', userId: 'stats-user' },
      { content: 'Âàõ‰∏öÂÖ¨Âè∏ÈúÄË¶ÅÂ•ΩÁöÑÂïÜ‰∏öÊ®°Âºè', userId: 'stats-user' },
      { content: 'Â≠¶‰π†ÁºñÁ®ãÈúÄË¶ÅÁªÉ‰π†', userId: 'stats-user' },
      { content: '‰øùÊåÅÂÅ•Â∫∑ÈúÄË¶ÅËøêÂä®', userId: 'stats-user' },
      { content: 'AIÊäÄÊúØ‰∏∫ÂåªÁñóÂ∏¶Êù•ÂèòÈù©', userId: 'stats-user' }, // Ê∑∑ÂêàÂàÜÁ±ª
      { content: 'WebÂºÄÂèëÂåÖÊã¨ÂâçÁ´ØÂíåÂêéÁ´Ø', userId: 'stats-user' },
      { content: 'ÊäïËµÑÁêÜË¥¢ÈúÄË¶Å‰∏ì‰∏öÁü•ËØÜ', userId: 'stats-user' },
      { content: 'Âú®Á∫øÊïôËÇ≤Âπ≥Âè∞ÂèëÂ±ïËøÖÈÄü', userId: 'stats-user' }
    ];

    console.log('ÊâßË°åÊµãËØïÂàÜÁ±ª‰ª•ÁîüÊàêÁªüËÆ°Êï∞ÊçÆ...');
    for (let i = 0; i < testRequests.length; i++) {
      await service.classify({
        content: testRequests[i].content,
        userId: testRequests[i].userId
      });
      console.log(`‚úÖ ÂÆåÊàêÂàÜÁ±ª ${i + 1}/${testRequests.length}`);
    }

    // Ëé∑ÂèñÂàÜÁ±ªÁªüËÆ°
    console.log('\nËé∑ÂèñÂàÜÁ±ªÁªüËÆ°‰ø°ÊÅØ:');
    const stats = service.getCategoryStats();

    console.log(`ÊÄªÂàÜÁ±ªÊï∞: ${stats.length}`);
    console.log('‰ΩøÁî®È¢ëÁéáTop 5ÂàÜÁ±ª:');
    stats.slice(0, 5).forEach((stat, index) => {
      console.log(`${index + 1}. ${stat.name}: ${stat.usageCount}Ê¨°‰ΩøÁî® (Âπ≥ÂùáÁΩÆ‰ø°Â∫¶: ${(stat.averageConfidence * 100).toFixed(1)}%)`);
    });

    // Ëé∑ÂèñÂàÜÊûêÊä•Âëä
    console.log('\n3Ô∏è‚É£ Ëé∑ÂèñÁ≥ªÁªüÂàÜÊûêÊä•Âëä...');
    const analytics = service.getAnalytics();

    console.log('Á≥ªÁªüÂàÜÊûêÊä•Âëä:');
    console.log(`- ÊÄªÂàÜÁ±ªÊ¨°Êï∞: ${analytics.totalClassifications}`);
    console.log(`- ÂàÜÁ±ªÂàÜÂ∏É: ${analytics.categoryDistribution.length} ‰∏™ÂàÜÁ±ªÊúâ‰ΩøÁî®ËÆ∞ÂΩï`);
    console.log(`- Êï¥‰ΩìÂáÜÁ°ÆÁéá: ${(analytics.accuracyMetrics.overallAccuracy * 100).toFixed(1)}%`);

    if (analytics.categoryDistribution.length > 0) {
      console.log('ÊúÄÊ¥ªË∑ÉÁöÑÂàÜÁ±ª:');
      analytics.categoryDistribution.slice(0, 3).forEach((stat, index) => {
        console.log(`${index + 1}. ${stat.name}: ${stat.usageCount}Ê¨°`);
      });
    }

    console.log('\n4Ô∏è‚É£ ÊµãËØïÁºìÂ≠òÁÆ°ÁêÜ...');

    // Ê∏ÖÁêÜÁºìÂ≠òÂâçÂêéÂØπÊØî
    console.log('Ê∏ÖÁêÜÁºìÂ≠òÂâçÁä∂ÊÄÅ:');
    const preCleanStats = service.getCategoryStats();
    console.log(`- ÁºìÂ≠òÁä∂ÊÄÅ: Ê¥ªË∑É`);

    service.clearCache();
    console.log('‚úÖ ÁºìÂ≠òÂ∑≤Ê∏ÖÁêÜ');

    // È™åËØÅÊ∏ÖÁêÜÂêéÂäüËÉΩÊ≠£Â∏∏
    const postCleanResult = await service.classify({
      content: 'ÁºìÂ≠òÊ∏ÖÁêÜÂêéÁöÑÊµãËØïÂÜÖÂÆπ',
      userId: 'cache-clean-test'
    });

    console.log(`‚úÖ ÁºìÂ≠òÊ∏ÖÁêÜÂêéÂäüËÉΩÊ≠£Â∏∏ÔºåËØÜÂà´Âà∞ ${postCleanResult.categories.length} ‰∏™ÂàÜÁ±ª`);

    console.log('\n5Ô∏è‚É£ ÊµãËØïËÆ≠ÁªÉÊï∞ÊçÆÁÆ°ÁêÜ...');

    // Ê∑ªÂä†ËÆ≠ÁªÉÊï∞ÊçÆ
    const trainingData = [
      {
        id: 'train-1',
        content: '‰∫∫Â∑•Êô∫ËÉΩÂíåÊú∫Âô®Â≠¶‰π†',
        categories: ['technology', 'ai-ml'],
        userId: 'trainer',
        timestamp: new Date(),
        isValidated: false
      },
      {
        id: 'train-2',
        content: 'Âàõ‰∏öÂíåÊäïËµÑ',
        categories: ['business', 'startup'],
        userId: 'trainer',
        timestamp: new Date(),
        isValidated: false
      },
      {
        id: 'train-3',
        content: 'ÂÅ•Â∫∑ÂíåËøêÂä®',
        categories: ['health'],
        userId: 'trainer',
        timestamp: new Date(),
        isValidated: false
      }
    ];

    console.log('Ê∑ªÂä†ËÆ≠ÁªÉÊï∞ÊçÆ...');
    for (const data of trainingData) {
      await service.addTrainingData(data);
      console.log(`‚úÖ Ê∑ªÂä†ËÆ≠ÁªÉÊï∞ÊçÆ: ${data.categories.join(', ')}`);
    }

    console.log('\n‚úÖ Á≥ªÁªüÂÅ•Â∫∑ÂíåÁõëÊéßÂäüËÉΩÊµãËØïÂÆåÊàêÔºÅ');
    return true;

  } catch (error) {
    console.error('‚ùå Á≥ªÁªüÂÅ•Â∫∑ÂíåÁõëÊéßÂäüËÉΩÊµãËØïÂ§±Ë¥•:', error);
    return false;
  }
}

// ‰∏ªÊµãËØïÂáΩÊï∞
async function runAllClassificationTests() {
  console.log('üöÄ ÂºÄÂßãËá™Âä®ÂàÜÁ±ªÊúçÂä°ÂÆåÊï¥ÊµãËØïÂ•ó‰ª∂\n');
  console.log('='.repeat(60));

  const testResults = {
    basicClassification: await testBasicClassification(),
    customCategories: await testCustomCategories(),
    algorithms: await testClassificationAlgorithms(),
    performance: await testPerformanceAndScalability(),
    edgeCases: await testEdgeCasesAndErrorHandling(),
    healthAndMonitoring: await testSystemHealthAndMonitoring()
  };

  console.log('\n' + '='.repeat(60));
  console.log('üìã Ëá™Âä®ÂàÜÁ±ªÊúçÂä°ÊµãËØïÁªìÊûúÊ±áÊÄª:');
  console.log('- Âü∫Á°ÄÂàÜÁ±ªÂäüËÉΩÊµãËØï:', testResults.basicClassification ? '‚úÖ ÈÄöËøá' : '‚ùå Â§±Ë¥•');
  console.log('- Ëá™ÂÆö‰πâÂàÜÁ±ªÂäüËÉΩÊµãËØï:', testResults.customCategories ? '‚úÖ ÈÄöËøá' : '‚ùå Â§±Ë¥•');
  console.log('- ÂàÜÁ±ªÁÆóÊ≥ïÊµãËØï:', testResults.algorithms ? '‚úÖ ÈÄöËøá' : '‚ùå Â§±Ë¥•');
  console.log('- ÊÄßËÉΩÂíåÂèØÊâ©Â±ïÊÄßÊµãËØï:', testResults.performance ? '‚úÖ ÈÄöËøá' : '‚ùå Â§±Ë¥•');
  console.log('- ËæπÁïåÊÉÖÂÜµÊµãËØï:', testResults.edgeCases ? '‚úÖ ÈÄöËøá' : '‚ùå Â§±Ë¥•');
  console.log('- Á≥ªÁªüÂÅ•Â∫∑ÁõëÊéßÊµãËØï:', testResults.healthAndMonitoring ? '‚úÖ ÈÄöËøá' : '‚ùå Â§±Ë¥•');

  const allPassed = Object.values(testResults).every(result => result);
  console.log('\nüèÜ Ëá™Âä®ÂàÜÁ±ªÊúçÂä°ÊÄª‰ΩìÁªìÊûú:', allPassed ? '‚úÖ ÊâÄÊúâÊµãËØïÈÄöËøá' : '‚ùå ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•');

  if (allPassed) {
    console.log('\nüéØ Ëá™Âä®ÂàÜÁ±ªÊúçÂä° (T104) ÂÆûÁé∞ÂÆåÊàêÂπ∂È™åËØÅÈÄöËøáÔºÅ');
    console.log('Á≥ªÁªüÂÖ∑Â§áÂÆåÊï¥ÁöÑËá™Âä®ÂàÜÁ±ªËÉΩÂäõÔºåÊîØÊåÅ20+ÁßçÈ¢ÑÂÆö‰πâÂàÜÁ±ªÂíåÁî®Êà∑Ëá™ÂÆö‰πâÂàÜÁ±ª„ÄÇ');
    console.log('ÈõÜÊàê‰∫ÜÂ§öÁßçÂàÜÁ±ªÁÆóÊ≥ï„ÄÅÂ§öÁ∫ßÂàÜÁ±ª‰ΩìÁ≥ª„ÄÅÊàêÊú¨ÊéßÂà∂ÂíåÊÄßËÉΩ‰ºòÂåñÁ≠âÁîü‰∫ßÁ∫ßÁâπÊÄß„ÄÇ');
  }

  return allPassed;
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂ÔºåÊâßË°åÊµãËØï
if (require.main === module) {
  runAllClassificationTests()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('Ëá™Âä®ÂàÜÁ±ªÊúçÂä°ÊµãËØïÊâßË°åÂá∫Èîô:', error);
      process.exit(1);
    });
}

export {
  testBasicClassification,
  testCustomCategories,
  testClassificationAlgorithms,
  testPerformanceAndScalability,
  testEdgeCasesAndErrorHandling,
  testSystemHealthAndMonitoring,
  runAllClassificationTests
};